//
// Copyright 2020 DXOS.org
//

import { Client } from '@dxos/client';
import { createKeyPair } from '@dxos/crypto';
import EditorPad from '@dxos/editor-pad';
import { MessengerModel } from '@dxos/messenger-model';
import MessengerPad from '@dxos/messenger-pad';
import PlannerPad from '@dxos/planner-pad';
import TasksPad from '@dxos/tasks-pad';
import { TextModel } from '@dxos/text-model';

import { restoreFromFile } from './restore-from-file';

// contains pads of all kinds, with some content in them
const exportedParty = '0aa6010a4065613565376365336231623635356462383031313963666331396439373532393634363835316266306163333737346330646137306239306265336430373431121977726e3a2f2f64786f732e6f72672f6974656d2f70617274791a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a65637432210a1f0a1da2011a0a180a0b646973706c61794e616d6512092a076d79206e616d650aa8010a4063323630323364343331363464376565643130326430646531366164363636616338646562646162356435303862356538323663623036353338343666646338122064786f732e6f72672f747970652f656469746f722f646f63756d656e744076321a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a656374321c0a1a0a18a201150a130a057469746c65120a2a086d79656469746f720a95020a4032303636616563306538376263346462333461633336326133653134643361353438393364346162383539626366316630633066303465373339343336666265122564786f732e6f72672f747970652f656469746f722f646f63756d656e742f636f6e74656e741a2277726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f746578742a406332363032336434333136346437656564313032643064653136616436363661633864656264616235643530386235653832366362303635333834366664633832440a420a400103de9bc2bd0c00070107636f6e74656e7403097061726167726170680700de9bc2bd0c00060400de9bc2bd0c011074686973206973206d79656469746f72000ab4010a40306561346137656531363361666661633766343165396538623337303932386630353336666166393435316236636539656162383064613536613532616338631a2a77726e3a2f2f70726f746f636f6c2e64786f732e6f72672f7465616d776f726b2f6d657373656e6765722a4063323630323364343331363464376565643130326430646531366164363636616338646562646162356435303862356538323663623036353338343666646338320212000aaa010a4065636230303030623335333232633063343033656565626466626534666662313135386162616335303861626531616565386532326635393865633963366464121f64786f732e6f72672f747970652f6d657373656e6765722f6368616e6e656c1a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a656374321f0a1d0a1ba201180a160a057469746c65120d2a0b6d796d657373656e6765720acc020a4036623738393531323330366436323534373238666530373061393663346434326466356332633332633437323932663135646537386261653166656439623761121f64786f732e6f72672f747970652f6d657373656e6765722f6d6573736167651a2a77726e3a2f2f70726f746f636f6c2e64786f732e6f72672f7465616d776f726b2f6d657373656e6765722a4065636230303030623335333232633063343033656565626466626534666662313135386162616335303861626531616565386532326635393865633963366464327912770a750a2b120d313630363932343933313530391a1474686973206973206d79206d657373656e67657222047070707012460a2094442ef4122174918e7e84a666ba45c7017ec99994c3f46d285d9890efdd0012101b1a200d92dd6c464c17b4d300201d73c6f1afb85f82bf0a71957510dc5e36106eddd00ab5010a4031303531336132623035333063376331343438353031313630653664316438373033616533616336613438643336663565653462393439316633636133346632121b64786f732e6f72672f747970652f706c616e6e65722f626f6172641a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a656374322e0a2c0a2aa201270a120a057469746c6512092a076d79626f6172640a110a0b6465736372697074696f6e12022a000af2010a4061626664646562356537636130343936396638663436626136663262363738326639376330336138393564613930623266356134353535616431316665323934121a64786f732e6f72672f747970652f706c616e6e65722f6c6973741a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a6563742a4031303531336132623035333063376331343438353031313630653664316438373033616533616336613438643336663565653462393439316633636133346632322a0a280a26a201230a110a057469746c6512082a06496365626f780a0e0a08706f736974696f6e120218000af3010a4065333164363933383865313136303230333962373666633363656166623561313764343866366463313136643566343137633466303264616237346230666539121a64786f732e6f72672f747970652f706c616e6e65722f6c6973741a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a6563742a4031303531336132623035333063376331343438353031313630653664316438373033616533616336613438643336663565653462393439316633636133346632322b0a290a27a201240a120a057469746c6512092a07537461727465640a0e0a08706f736974696f6e120218010af0010a4034663638363465373735353564393964633433353330306338653634303865393666653733323437316638343562633035346564393161383538663562616466121a64786f732e6f72672f747970652f706c616e6e65722f6c6973741a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a6563742a403130353133613262303533306337633134343835303131363065366431643837303361653361633661343864333666356565346239343931663363613334663232280a260a24a201210a0f0a057469746c6512062a04446f6e650a0e0a08706f736974696f6e120218020acc020a4066373631653766326630343933323662326632333236343632383431333437626338376336323361393033343532333238646663343136383931636163643530121a64786f732e6f72672f747970652f706c616e6e65722f636172641a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a6563742a40313035313361326230353330633763313434383530313136306536643164383730336165336163366134386433366635656534623934393166336361333466323283010a80010a7ea2017b0a1b0a057469746c6512122a1074686973206973206d7920626f6172640a0e0a08706f736974696f6e120218000a4c0a066c697374496412422a40616266646465623565376361303439363966386634366261366632623637383266393763303361383935646139306232663561343535356164313166653239340a9f010a4030336336653262376461643666633238656337356630613861373762373735623766656435373637613831346238306432393437316666343130326237356139121864786f732e6f72672f747970652f7461736b732f6c6973741a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a656374321b0a190a17a201140a120a057469746c6512092a076d797461736b730afa010a4065353832313730303133313333666137366634653335306364636536363731356564623334646562663938353537333832646166316534633663373636616261121864786f732e6f72672f747970652f7461736b732f7461736b1a2477726e3a2f2f70726f746f636f6c2e64786f732e6f72672f6d6f64656c2f6f626a6563742a403033633665326237646164366663323865633735663061386137376237373562376665643537363761383134623830643239343731666634313032623735613932340a320a30a2012d0a1a0a047465787412122a1074686973206973206d79207461736b730a0f0a09636f6d706c6574656412021000';

describe.skip('Restore from file', () => {
  const client = new Client();
  let restoredParty;

  beforeAll(async () => {
    jest.setTimeout(20000);

    await client.initialize();
    await client.createProfile({ ...createKeyPair(), username: 'Test-User' });
    await client.registerModel(MessengerModel);
    await client.registerModel(TextModel);

    restoredParty = await restoreFromFile(client, exportedParty);
  });

  it('Restores all types of pad', async () => {
    const type = [EditorPad.type, MessengerPad.type, PlannerPad.type, TasksPad.type];
    const itemsInParty = await restoredParty.database.queryItems({ partyKey: restoredParty.key, type });
    expect(itemsInParty.value.length).toEqual(4); // Restore one for every type of pad
  });

  it('Restores Messenger with messages', async () => {
    const [messenger] = (await restoredParty.database.queryItems({ partyKey: restoredParty.key, type: MessengerPad.contentType })).value;
    expect(messenger).toBeDefined();
    expect(messenger.model.messages.length).toEqual(1);
    const [message] = messenger.model.messages;

    // This message has been sent before exporting the party to a file
    expect(message.sender).toEqual('pppp');
    expect(message.text).toEqual('this is my messenger');
  });

  it('Restores Editor', async () => {
    const [editor] = (await restoredParty.database.queryItems({ partyKey: restoredParty.key, type: EditorPad.contentType })).value;
    expect(editor).toBeDefined();
  });

  it('Restores Tasks with tasks', async () => {
    const [task] = (await restoredParty.database.queryItems({ partyKey: restoredParty.key, type: TasksPad.contentType })).value;
    // One task added before exporting the party into a file
    expect(task.model.getProperty('text')).toEqual('this is my tasks');
  });

  it('Restores Planner with cards', async () => {
    const plannerItems = (await restoredParty.database.queryItems({ partyKey: restoredParty.key, type: PlannerPad.contentType })).value;
    expect(plannerItems.filter(item => item.type === 'dxos.org/type/planner/list').length).toEqual(3);
    expect(plannerItems.filter(item => item.type === 'dxos.org/type/planner/card').length).toEqual(1);

    const [card] = plannerItems.filter(item => item.type === 'dxos.org/type/planner/card');
    expect(card.model.getProperty('title')).toEqual('this is my board');
  });

  afterAll(async () => {
    await client.destroy();
  });
});
